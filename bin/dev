#!/bin/bash

set -e

function devcontainer_root() {
  local dir=$PWD
  while [ "$dir" != "/" ]; do
    if [[ -f "$dir/.devcontainer.json" ]] || [[ -d "$dir/.devcontainer" ]]; then
      echo $dir
      return
    fi
    dir=$(dirname "$dir")
  done
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  return 1
}

function devcontainer_config() {
  if [[ -f "$1/.devcontainer/podman/devcontainer.json" ]]; then
    echo "$1/.devcontainer/podman/devcontainer.json"
  elif [[ -f "$1/.devcontainer/devcontainer.json" ]]; then
    echo "$1/.devcontainer/devcontainer.json"
  else
    echo "$1/.devcontainer.json"
  fi
}

function get_container_id() {
  podman ps -q --filter label=devcontainer.local_folder=$root
}

function get_username() {
  local username=""
  if [ -f "$root/.devcontainer/Dockerfile" ]; then
    username=$(
      awk -v IGNORECASE=1 '/^\s*USER\s+/{u=$2} END{print u}' "$root/.devcontainer/Dockerfile"
    )
  fi
  echo "${username:-ai}"
}

if [ "$1" = "--isolate" ]; then
  cp ~/Dev/environment/devcontainer/devcontainer.json .devcontainer.json
  if [ -d .git ]; then
    echo '.devcontainer.json' >> .git/info/exclude
  fi

  while true; do
    port=$(shuf -i 1024-9999 -n 1)
    if ! ss -tuln | grep -q ":${port}\s"; then
      used=$(grep "\"$port:22\"" ~/Dev/*/{.,.devcontainer/}devcontainer.json -l || true)
      if [ "$used" = "" ]; then
        break
      fi
    fi
  done
  sed -i "s|\"[0-9]\+:22\"|\"$port:22\"|g" .devcontainer.json
  echo "Project port will be $port"
  exit
fi

root=$(devcontainer_root)
if [ "$root" = "" ]; then
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  return 1
fi

if [ "$1" = "--up" ]; then
  ~/.local/lib/node/node_modules/.bin/devcontainer up \
    --docker-path podman \
    --remote-env "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}" \
    --mount "type=bind,source=${SSH_AUTH_SOCK},target=${SSH_AUTH_SOCK}" \
    --mount "type=bind,source=/home/ai/.local/share/multiocular,target=/home/$(get_username)/.local/share/multiocular" \
    --dotfiles-repository https://github.com/ai/environment.git \
    --dotfiles-install-command devcontainer/install-dotfiles \
    --workspace-folder $root --config $(devcontainer_config $root)

elif [ "$1" = "--down" ]; then
  container_id=$(get_container_id)
  if [ "$container_id" == "" ]; then
    echo "Container is not running"
  else
    podman kill $container_id
  fi

elif [ "$1" = "--rebuild" ]; then
  search_pattern="vsc-$(basename "$root")-[0-9a-f]\+-uid"
  image_id=$(podman image ls --format "{{.Repository}}:{{.Tag}}" | grep "$search_pattern" | awk '{print $1}')
  if [ "$image_id" != "" ]; then
    podman image rm --force $image_id
  fi
  ~/Dev/environment/bin/dev --up

elif [ "$1" = "--port" ]; then
  if [[ "$2" =~ ^[0-9]+$ ]]; then
    # $2 is a number, use it as port
    port="$2"
    shift 2
    args="$*"
  else
    # No port specified or $2 is not a number, generate random port
    while true; do
      port=$(shuf -i 1024-9999 -n 1)
      if ! ss -tuln | grep -q ":${port}\s"; then
        break
      fi
    done
    shift 1
    args="$* --port $port"
  fi

  # Check if args start with "pnpm multiocular" and load .env file if so
  env_args=""
  if [[ "$args" == pnpm\ multiocular* ]] && [ -f ~/Dev/multiocular/.env ]; then
    env_args="--env-file /home/ai/Dev/multiocular/.env"
  fi

  podman run --rm \
    -w "/workspaces/$(basename $root)" \
    -p "${port}:${port}" \
    --mount "type=bind,source=$root,target=/workspaces/$(basename $root)" \
    --mount "type=bind,source=/home/ai/.local/share/multiocular,target=/home/$(get_username)/.local/share/multiocular" \
    --security-opt label=disable --userns=keep-id --ulimit=host \
    --cap-add=NET_RAW \
    $env_args \
    -it localhost/ai-opensource \
    $args

else
  container_id=$(get_container_id)
  if [ "$container_id" == "" ]; then
    ~/Dev/environment/bin/dev --up
    container_id=$(get_container_id)
  fi
  subdir=""
  if [ "$PWD" != "$root" ]; then
    subdir="${PWD#$root/}"
  fi
  workdir="/workspaces/$(basename $root)/$subdir"
  if [ -z "$1" ]; then
    podman exec -w $workdir -it $container_id zsh
  else
    podman exec -w $workdir -it $container_id zsh -ic "$*"
  fi
fi
